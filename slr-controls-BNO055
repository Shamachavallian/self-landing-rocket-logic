//------------------------------------------------------------------//
//                                                                  //
//                 Self Landing Model Rocket Logic                  //
//                     UBCO Aerospace Club                          //
//                                                                  //
//------------------------------------------------------------------//

//included libraries
#include <Adafruit_BNO055.h>
#include <utility/imumaths.h>
#include <Adafruit_Sensor.h>
#include <Wire.h>
#include <SPI.h>
#include <SD.h>

//Global Constants
Adafruit_BNO055 bno = Adafruit_BNO055(55, 0x28);
const int chipSelect = 4;   // if this was for imu6050 then we can delete

//setup
void imuSetup();
void sdSetup();

//loop functions
void imuLog(float [10][6]);
void dataFormat(float [10][6], File);
void sdLog(float [10][6]);

#define BNO055_SAMPLERATE_DELAY_MS (100)

void displaySensorStatus(void)
{
  /* Get the system status values (mostly for debugging purposes) */
  uint8_t system_status, self_test_results, system_error;
  system_status = self_test_results = system_error = 0;
  bno.getSystemStatus(&system_status, &self_test_results, &system_error);

  /* Display the results in the Serial Monitor */
  Serial.println("");
  Serial.print("System Status: 0x");
  Serial.println(system_status, HEX);
  Serial.print("Self Test:     0x");
  Serial.println(self_test_results, HEX);
  Serial.print("System Error:  0x");
  Serial.println(system_error, HEX);
  Serial.println("");
  delay(500);
}

void displayCalStatus(void)
{
  /* Get the four calibration values (0..3) */
  /* Any sensor data reporting 0 should be ignored, */
  /* 3 means 'fully calibrated" */
  uint8_t system, gyro, accel, mag;
  system = gyro = accel = mag = 0;
  bno.getCalibration(&system, &gyro, &accel, &mag);

  /* The data should be ignored until the system calibration is > 0 */
  Serial.print("\t");
  if (!system)
  {
    Serial.print("! ");
  }

  /* Display the individual values */
  Serial.print("Sys:");
  Serial.print(system, DEC);
  Serial.print(" G:");
  Serial.print(gyro, DEC);
  Serial.print(" A:");
  Serial.print(accel, DEC);
  Serial.print(" M:");
  Serial.print(mag, DEC);
}


void setup() {
  Serial.begin(9600);  // we may need to change to 115200

  imuSetup();
  sdSetup();
  
  
  delay(100);

}

void imuSetup(void){
  Serial.begin(115200);
  Serial.println("Orientation Sensor Test"); Serial.println("");

  /* Initialise the sensor */
  if(!bno.begin())
  {
    /* There was a problem detecting the BNO055 ... check your connections */
    Serial.print("Ooops, no BNO055 detected ... Check your wiring or I2C ADDR!");
    while(1);
  }

  delay(1000);

  /* Display some basic information on this sensor */
//  displaySensorDetails();

  /* Optional: Display current status */
  displaySensorStatus();

  bno.setExtCrystalUse(true);
}

void sdSetup(){

  // see if the card is present and can be initialized:
  if (!SD.begin(chipSelect)) {
    Serial.println("Card failed, or not present");
  }

}



void loop() {
  // Required variables
  float data[10][6]={0};
  
  /* Get new sensor events with the readings */
  imuLog(data);
  sdLog(data);
}


void imuLog(float data[10][6]){
  // A function to take data from the IMU and log it to an array
/* Get a new sensor event */
  sensors_event_t event;
  bno.getEvent(&event);

  /* Display the floating point data */
  Serial.print("Yaw: ");                     //This doesn't make sense to me, I guess we print Yaw and some how it knows that the event.orientation.x is equivalent to yaw.
  Serial.print(event.orientation.x, 4);
  Serial.print("\tPitch: ");                 //Same Same
  Serial.print(event.orientation.y, 4);
  Serial.print("\tRoll: ");                  //same same
  Serial.print(event.orientation.z, 4);

  /* Optional: Display calibration status */
  displayCalStatus();

  /* Optional: Display sensor status (debug only) */
  //displaySensorStatus();

  /* New line for the next sample */
  Serial.println("");

  /* Wait the specified delay before requesting nex data */
  delay(BNO055_SAMPLERATE_DELAY_MS);




    for(int timer=0;timer<10;timer++){
  

      data[timer][0]=event.orientation.x;                 // m/s^2
      data[timer][1]=event.orientation.y;                 // 
      data[timer][2]=event.orientation.z;                 // 
      /*
      data[timer][3]=g.gyro.x;        make sure we arent missing stuff expecting output in rad/s
      data[timer][4]=g.gyro.y;
      data[timer][5]=g.gyro.z;
      */
  }

}

void sdLog( float data[10][6] ){
  
  // open the file. note that only one file can be open at a time,
  // so you have to close this one before opening another.
  File dataFile = SD.open("datalog.txt", FILE_WRITE);

  // if the file is available, write to it:
  if (dataFile) {
    dataWriteToFile(data, dataFile);
    dataFile.close();
  }
  // if the file isn't open, pop up an error:
  else {
    Serial.println("error opening datalog.txt");
  }

}

void dataWriteToFile(float data[10][6], File dataFile){
  //  A function to take accelleration data and write to a file in a csv format.

  for(int i=0;i<10;i++){
    for(int j=0;j<6;j++){
      String dataChar = (String)data[i][j];
      dataFile.print( dataChar +",");
    }
    dataFile.print("\n");  
  }

}

/* Displays some basic information on this sensor 
void displaySensorDetails(void)
{
  sensor_t sensor;
  bno.getSensor(&sensor);
  Serial.println("------------------------------------");
  Serial.print  ("Sensor:       "); Serial.println(sensor.name);
  Serial.print  ("Driver Ver:   "); Serial.println(sensor.version);
  Serial.print  ("Unique ID:    "); Serial.println(sensor.sensor_id);
  Serial.print  ("Max Value:    "); Serial.print(sensor.max_value); Serial.println(" xxx");
  Serial.print  ("Min Value:    "); Serial.print(sensor.min_value); Serial.println(" xxx");
  Serial.print  ("Resolution:   "); Serial.print(sensor.resolution); Serial.println(" xxx");
  Serial.println("------------------------------------");
  Serial.println("");
  delay(500);
}
*/
